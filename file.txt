## **📌 Basic MySQL Commands for Database & CRUD Operations**  

Let’s go step by step with **MySQL basic commands** for:  
✅ **Creating a database**  
✅ **Creating tables**  
✅ **CRUD Operations** (Create, Read, Update, Delete)  

---

## **1. Create a Database**
```sql
CREATE DATABASE school;
```
🔹 This creates a new database named **school**.  

**Use the database:**
```sql
USE school;
```
🔹 This selects **school** as the active database.  

---

## **2. Create a Table**
```sql
CREATE TABLE students (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    age INT CHECK (age > 10),
    email VARCHAR(100) UNIQUE,
    class VARCHAR(10)
);
```
🔹 **AUTO_INCREMENT**: `id` will increase automatically.  
🔹 **NOT NULL**: `name` cannot be empty.  
🔹 **CHECK**: Ensures `age > 10`.  
🔹 **UNIQUE**: Ensures no duplicate `email`.  

---

## **3. Insert Data (CREATE)**
```sql
INSERT INTO students (name, age, email, class)
VALUES ('John Doe', 15, 'john@example.com', '10A');
```
🔹 **Only specified columns are inserted** (`id` is auto-generated).  

**Insert Multiple Rows:**
```sql
INSERT INTO students (name, age, email, class)
VALUES 
    ('Alice Smith', 14, 'alice@example.com', '9B'),
    ('Bob Johnson', 16, 'bob@example.com', '10A');
```

---

## **4. Read Data (SELECT)**
### **Get all students:**
```sql
SELECT * FROM students;
```
### **Get specific columns:**
```sql
SELECT name, age FROM students;
```
### **Filter results using WHERE:**
```sql
SELECT * FROM students WHERE age > 15;
```
### **Sort results:**
```sql
SELECT * FROM students ORDER BY age DESC;
```

---

## **5. Update Data (UPDATE)**
```sql
UPDATE students 
SET class = '12B'
WHERE name = 'John Doe';
```
🔹 Changes **John Doe’s** class to **12B**.  

**Update Multiple Fields:**
```sql
UPDATE students 
SET age = 17, class = '11A'
WHERE name = 'Alice Smith';
```

---

## **6. Delete Data (DELETE)**
```sql
DELETE FROM students WHERE name = 'Bob Johnson';
```
🔹 Deletes the student named **Bob Johnson**.  

**Delete all students in class ‘10A’**:
```sql
DELETE FROM students WHERE class = '10A';
```

---

## **7. Drop a Table or Database**
```sql
DROP TABLE students;
```
🔹 Deletes the **students** table completely.  

```sql
DROP DATABASE school;
```
🔹 Deletes the **school** database (⚠ irreversible).  

---

## **8. Truncate (Delete All Rows but Keep Table)**
```sql
TRUNCATE TABLE students;
```
🔹 Deletes all records **but keeps the table structure**.  

---

✅ **All MySQL basics are covered!** 🚀 Let me know if you need more details! 😊

📌 Final Database Schema
Table Name	Attributes & Constraints
students	id (INT, PRIMARY KEY), name (VARCHAR(50), NOT NULL), age (INT, CHECK (age > 10)), email (VARCHAR(100), UNIQUE), class (VARCHAR(10))
courses	course_id (INT, PRIMARY KEY), course_name (VARCHAR(50), NOT NULL), teacher_id (INT, FOREIGN KEY REFERENCES teachers(id))
enrollments	enrollment_id (INT, PRIMARY KEY), student_id (INT, FOREIGN KEY REFERENCES students(id)), course_id (INT, FOREIGN KEY REFERENCES courses(course_id)), enrollment_date (DATE, NOT NULL)
teachers	id (INT, PRIMARY KEY), name (VARCHAR(50), NOT NULL), subject (VARCHAR(50), NOT NULL), email (VARCHAR(100), UNIQUE)
📌 Creating Tables with SQL Queries
1. students Table
sql
Copy
Edit
CREATE TABLE students (
    id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    age INT CHECK (age > 10),
    email VARCHAR(100) UNIQUE,
    class VARCHAR(10)
);
🔹 Primary Key: id ensures uniqueness.
🔹 NOT NULL: name cannot be empty.
🔹 CHECK Constraint: Ensures age > 10.
🔹 UNIQUE: email must be unique.

2. teachers Table
sql
Copy
Edit
CREATE TABLE teachers (
    id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    subject VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);
🔹 Primary Key: id.
🔹 NOT NULL: name, subject fields are mandatory.
🔹 UNIQUE: email should not be repeated.

3. courses Table
sql
Copy
Edit
CREATE TABLE courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(50) NOT NULL,
    teacher_id INT,
    FOREIGN KEY (teacher_id) REFERENCES teachers(id)
);
🔹 Primary Key: course_id.
🔹 Foreign Key: teacher_id references teachers(id).
🔹 NOT NULL: course_name must have a value.

4. enrollments Table (Many-to-Many Relationship)
sql
Copy
Edit
CREATE TABLE enrollments (
    enrollment_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    enrollment_date DATE NOT NULL,
    FOREIGN KEY (student_id) REFERENCES students(id),
    FOREIGN KEY (course_id) REFERENCES courses(course_id)
);
🔹 Primary Key: enrollment_id.
🔹 Foreign Key 1: student_id references students(id).
🔹 Foreign Key 2: course_id references courses(course_id).
🔹 NOT NULL: enrollment_date is required.

📌 How These Tables Connect
students enroll in courses through the enrollments table.
Each course is taught by a teacher.
The enrollments table links students and courses (many-to-many relationship).
📌 Example Queries Using This Schema
Q1: How do I find students enrolled in "DBMS"?
sql
Copy
Edit
SELECT s.name 
FROM students s
JOIN enrollments e ON s.id = e.student_id
JOIN courses c ON e.course_id = c.course_id
WHERE c.course_name = 'DBMS';
Explanation:

Joins students, enrollments, and courses.
Filters students enrolled in "DBMS".
Q2: How many students are enrolled in each course?
sql
Copy
Edit
SELECT c.course_name, COUNT(e.student_id) AS total_students
FROM courses c
JOIN enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name;
Explanation:

Groups by course_name.
Counts students in each course.
Q3: How do I find the teacher for each course?
sql
Copy
Edit
SELECT c.course_name, t.name AS teacher_name
FROM courses c
JOIN teachers t ON c.teacher_id = t.id;
Explanation:

Joins courses and teachers.
Displays course name and teacher name.
Q4: How do I find students who are not enrolled in any course?
sql
Copy
Edit
SELECT name FROM students
WHERE id NOT IN (SELECT student_id FROM enrollments);
Explanation:

Uses a nested query to find students without enrollments.
Q5: How do I get the average age of students per class?
sql
Copy
Edit
SELECT class, AVG(age) AS avg_age
FROM students
GROUP BY class;
Explanation:

Groups students by class.
Computes the average age per class.
📌 Final Summary
Tables & Constraints
Table	Primary Key	Foreign Keys	Unique	Not Null	Other Constraints
students	id	-	email	name	age > 10 (CHECK)
teachers	id	-	email	name, subject	-
courses	course_id	teacher_id → teachers(id)	-	course_name	-
enrollments	enrollment_id	student_id → students(id), course_id → courses(course_id)	-	enrollment_date	-
This structured example should cover all key DBMS concepts with real-world implementation. 🚀 Let me know if you need further explanations! 😊








You said:
did u cover all these NULL in SQL queries
Nesting of queries
Aggregate functions
Grouping 
General Constraints as Assertions
Views in SQL
ChatGPT said:
I covered NULL in SQL queries, Nesting of Queries, Aggregate Functions, and Grouping, but I haven’t yet covered General Constraints (Assertions) and Views in SQL. Let me complete those topics now.

5. General Constraints as Assertions
Assertions allow us to enforce complex constraints across tables.

Q1: How can I ensure that no student can enroll in more than 5 courses?
sql
Copy
Edit
CREATE ASSERTION max_courses_per_student
CHECK (
    NOT EXISTS (
        SELECT student_id 
        FROM enrollments
        GROUP BY student_id
        HAVING COUNT(course_id) > 5
    )
);
Explanation:

Groups students by student_id.
Checks if any student has more than 5 enrollments.
Prevents insertion/update if the condition is violated.
⚠️ Note: Some databases (like MySQL) do not support ASSERTION. In such cases, you can enforce this using triggers instead.

Q2: How can I ensure that teachers must have at least one assigned course?
sql
Copy
Edit
CREATE ASSERTION teacher_must_have_course
CHECK (
    NOT EXISTS (
        SELECT id FROM teachers
        WHERE id NOT IN (SELECT teacher_id FROM courses)
    )
);
Explanation:

Ensures that each teacher_id in teachers must appear in courses.
Prevents teachers without assigned courses.
6. Views in SQL
Views are virtual tables created from queries. They don’t store data but make querying easier.

Q1: How do I create a view to show student enrollments?
sql
Copy
Edit
CREATE VIEW student_enrollments AS
SELECT s.id, s.name, c.course_name, e.enrollment_date
FROM students s
JOIN enrollments e ON s.id = e.student_id
JOIN courses c ON e.course_id = c.course_id;
Execution:

sql
Copy
Edit
SELECT * FROM student_enrollments;
Explanation:

Creates a virtual table showing students and their enrolled courses.
You can query this view like a table.
Q2: How do I create a view to display teachers and their courses?
sql
Copy
Edit
CREATE VIEW teacher_courses AS
SELECT t.name AS teacher_name, c.course_name
FROM teachers t
JOIN courses c ON t.id = c.teacher_id;
Execution:

sql
Copy
Edit
SELECT * FROM teacher_courses;
Explanation:

Creates a view listing teachers with their assigned courses.
Q3: How do I update a view?
If you need to modify a view, use:

sql
Copy
Edit
CREATE OR REPLACE VIEW student_enrollments AS
SELECT s.id, s.name, c.course_name, e.enrollment_date
FROM students s
JOIN enrollments e ON s.id = e.student_id
JOIN courses c ON e.course_id = c.course_id
WHERE e.enrollment_date >= '2024-01-01';
Explanation:

Updates the existing view to show enrollments after January 2024.
